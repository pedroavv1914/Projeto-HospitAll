services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: hospitall-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hospitall_db
      POSTGRES_USER: hospitall_user
      POSTGRES_PASSWORD: hospitall_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    networks:
      - hospitall-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospitall_user -d hospitall_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: hospitall-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass hospitall_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - hospitall-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hospitall-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hospitall_db
      DB_USER: hospitall_user
      DB_PASSWORD: hospitall_password
      USE_POSTGRES: "true"
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRES_IN: 1h
      JWT_REFRESH_EXPIRES_IN: 7d
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: hospitall_redis_password
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hospitall-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso (opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: hospitall-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - hospitall-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  hospitall-network:
    driver: bridge